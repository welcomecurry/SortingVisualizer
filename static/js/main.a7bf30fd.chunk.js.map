{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/bubbleSort.js","sortingAlgorithms/selectionSort.js","SortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/insertionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","swap","partitionArray","firstIndex","secondIndex","temp","getBubbleSortAnimations","bubbleSort","getSelectionSortAnimations","minIndex","selectionSort","PRIMARY_COLOR","CSS_COLOR_NAMES","SortingVisualizer","props","state","disabled","this","resetArray","randomInt","setState","console","log","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","Navbar","bg","variant","Nav","className","Item","Button","onClick","mergeSort","map","value","idx","React","Component","min","max","random","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mWAAO,SAASA,EAAuBC,GACnC,IAAMC,EAAa,GACnB,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAiBH,EAAMI,QAE7B,OAGF,SAASC,EACPC,EACAC,EACAC,EACAL,EACAF,GAEA,GAAIM,IAAaC,EAAQ,OACzB,IAAMC,EAAYC,KAAKC,OAAOJ,EAAWC,GAAU,GACnDH,EAAgBF,EAAgBI,EAAUE,EAAWH,EAAWL,GAChEI,EAAgBF,EAAgBM,EAAY,EAAGD,EAAQF,EAAWL,GAIpE,SACEK,EACAC,EACAE,EACAD,EACAL,EACAF,GAEA,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAY,EACpB,KAAOI,GAAKJ,GAAaK,GAAKN,GAG5BP,EAAWc,KAAK,CAACF,EAAGC,IAGpBb,EAAWc,KAAK,CAACF,EAAGC,IAChBX,EAAeU,IAAMV,EAAeW,IAGtCb,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,OAIhCZ,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,MAGpC,KAAOD,GAAKJ,GAGVR,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACF,EAAGA,IAGpBZ,EAAWc,KAAK,CAACH,EAAGT,EAAeU,KACnCP,EAAUM,KAAOT,EAAeU,KAElC,KAAOC,GAAKN,GAGVP,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACD,EAAGA,IAGpBb,EAAWc,KAAK,CAACH,EAAGT,EAAeW,KACnCR,EAAUM,KAAOT,EAAeW,KAvDlCE,CAAQV,EAAWC,EAAUE,EAAWD,EAAQL,EAAgBF,GAfhEI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAgBF,GACrDA,ECLJ,SAASgB,EAAuBjB,GACnC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,QAG3B,OAKJ,SAASe,EAAUD,EAAgBE,EAAYC,EAAUpB,GACrD,IAAIqB,EACAF,EAAaC,IACbC,EAMR,SAAwBJ,EAAgBE,EAAYC,EAAUpB,GAG1D,IAFA,IAAIsB,EAAQL,EAAeG,GACvBC,EAAaF,EACRP,EAAIO,EAAYP,GAAKQ,EAAW,EAAGR,IACxCZ,EAAWc,KAAK,CAACF,EAAGQ,IACpBpB,EAAWc,KAAK,CAACF,EAAGQ,IAChBH,EAAeL,IAAMU,GAErBtB,EAAWc,KAAK,CAACF,EAAGK,EAAeI,KACnCrB,EAAWc,KAAK,CAACO,EAAYJ,EAAeL,KAC5CW,EAAKN,EAAgBL,EAAIS,GACzBA,MAGArB,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,KAE1Bd,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,IAU1B,OARAd,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,IAEtBd,EAAWc,KAAK,CAACO,EAAYJ,EAAeG,KAC5CpB,EAAWc,KAAK,CAACM,EAAUH,EAAeI,KAC1CE,EAAKN,EAAgBI,EAAYD,GAC1BC,EAlCUG,CAAeP,EAAgBE,EAAYC,EAAUpB,GAClEkB,EAAUD,EAAgBE,EAAYE,EAAa,EAAGrB,GACtDkB,EAAUD,EAAgBI,EAAa,EAAGD,EAAUpB,IAZxDkB,CAAUD,EAAgB,EAAGA,EAAehB,OAAS,EAAGD,GAEjD,CAACA,EADRD,EAAQkB,GA8CZ,SAASM,EAAKN,EAAgBQ,EAAYC,GACtC,IAAIC,EAAOV,EAAeQ,GAC1BR,EAAeQ,GAAcR,EAAeS,GAC5CT,EAAeS,GAAeC,ECrD3B,SAASC,EAAwB7B,GACpC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,QAG3B,OAGJ,SAAoBc,EAAgBjB,GAChC,IAAK,IAAIY,EAAI,EAAGA,EAAIK,EAAehB,OAAS,EAAGW,IAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAII,EAAehB,OAASW,EAAI,EAAGC,IAC/Cb,EAAWc,KAAK,CAACD,EAAGA,EAAI,IACxBb,EAAWc,KAAK,CAACD,EAAGA,EAAI,IACpBI,EAAeJ,GAAKI,EAAeJ,EAAI,IACvCb,EAAWc,KAAK,CAACD,EAAGI,EAAeJ,EAAI,KACvCb,EAAWc,KAAK,CAACD,EAAI,EAAGI,EAAeJ,KACvCU,EAAKN,EAAgBJ,EAAGA,EAAI,KAG5Bb,EAAWc,KAAK,EAAE,GAAI,IACtBd,EAAWc,KAAK,EAAE,GAAI,KAjBlCe,CAAWZ,EAAgBjB,GAEpB,CAACA,EADRD,EAAQkB,GAsBZ,SAASM,EAAKN,EAAgBQ,EAAYC,GACtC,IAAIC,EAAOV,EAAeQ,GAC1BR,EAAeQ,GAAcR,EAAeS,GAC5CT,EAAeS,GAAeC,EC7B3B,SAASG,EAA2B/B,GACvC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,QAG3B,OAGJ,SAAuBc,EAAgBjB,GACnC,IAAK,IAAIY,EAAI,EAAGA,EAAIK,EAAehB,OAAS,EAAGW,IAAK,CAEhD,IADA,IAAImB,EAAWnB,EACNC,EAAID,EAAI,EAAGC,EAAII,EAAehB,OAAQY,IAC3Cb,EAAWc,KAAK,CAAC,eAAgBD,EAAGkB,IACpC/B,EAAWc,KAAK,CAAC,eAAgBD,EAAGkB,IAChCd,EAAeJ,GAAKI,EAAec,KACnCA,EAAWlB,GAGnBb,EAAWc,KAAK,CAAC,OAAQiB,EAAUd,EAAeL,KAClDZ,EAAWc,KAAK,CAAC,OAAQF,EAAGK,EAAec,KAE3CR,EAAKN,EAAgBc,EAAUnB,IAlBnCoB,CAAcf,EAAgBjB,GAEvB,CAACA,EADRD,EAAQkB,GAqBZ,SAASM,EAAKN,EAAgBQ,EAAYC,GACtC,IAAIC,EAAOV,EAAeQ,GAC1BR,EAAeQ,GAAcR,EAAeS,GAC5CT,EAAeS,GAAeC,EFpBlCX,EAAuB,CAAC,EAAE,EAAE,EAAE,IGE9B,IAAIiB,EAAgB,cAIdC,EAAkB,CACpB,YACA,OACA,aACA,QACA,QACA,SACA,QACA,iBACA,OACA,aACA,QACA,YACA,YACA,aACA,YACA,QACA,iBACA,UACA,OACA,WACA,WACA,gBACA,WACA,WACA,YACA,YACA,cACA,iBACA,aACA,aACA,UACA,aACA,eACA,gBACA,gBACA,gBACA,gBACA,aACA,WACA,cACA,UACA,UACA,aACA,YACA,cACA,UACA,OACA,YACA,OACA,OACA,QACA,cACA,UACA,YACA,SACA,QACA,YACA,eACA,YACA,aACA,uBACA,YACA,YACA,aACA,YACA,cACA,gBACA,eACA,iBACA,iBACA,iBACA,cACA,OACA,YACA,QACA,UACA,SACA,mBACA,aACA,eACA,eACA,iBACA,kBACA,oBACA,kBACA,kBACA,eACA,YACA,WACA,cACA,OACA,UACA,QACA,YACA,SACA,YACA,SACA,YACA,gBACA,gBACA,aACA,YACA,OACA,OACA,OACA,aACA,SACA,gBACA,MACA,YACA,YACA,cACA,SACA,aACA,WACA,SACA,SACA,UACA,YACA,YACA,YACA,cACA,YACA,MACA,OACA,UACA,SACA,YACA,SACA,SACA,eAGiBC,E,kDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTtC,MAAO,GACPuC,UAAU,GALC,E,gEAUfC,KAAKC,e,mCAKL,IADA,IAAMzC,EAAQ,GACLa,EAAI,EAAGA,EAxJX,IAwJqBA,IACtBb,EAAMe,KAAK2B,EAAU,EAAG,MAE5BF,KAAKG,SAAS,CAAE3C,UAChBkC,EAAgBC,EAAgBO,EAAU,EAAGP,EAAgBjC,SAC7D0C,QAAQC,IAAIX,K,kCAKZ,IADA,IAAMjC,EAAaF,EAAuByC,KAAKF,MAAMtC,OAD7C,WAECa,GACL,IAAMiC,EAAYC,SAASC,uBAAuB,aAElD,GADsBnC,EAAI,IAAM,EACb,CAAC,IAAD,cACgBZ,EAAWY,GAD3B,GACRoC,EADQ,KACGC,EADH,KAETC,EAAcL,EAAUG,GAAWG,MACnCC,EAAcP,EAAUI,GAAWE,MACnCE,EAAQzC,EAAI,IAAM,EA1KhB,MA0KsCqB,EAC9CqB,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IA3KvB,EA4KRzC,QAEH0C,YAAW,WAAO,IAAD,cACkBtD,EAAWY,GAD7B,GACNoC,EADM,KACKQ,EADL,KAEOX,EAAUG,GAAWG,MAC7BM,OAAZ,UAAwBD,EAAxB,QAjLO,EAkLR5C,IAjBFA,EAAI,EAAGA,EAAIZ,EAAWC,OAAQW,IAAM,EAApCA,K,kCAwBT,IAFS,IAAD,EACwBI,EAAuBuB,KAAKF,MAAMtC,OAD1D,mBACDC,EADC,KAECY,GAFD,KAEK,GAAGA,EAAIZ,EAAWC,OAAS,EAAGW,IAAK,CAC5C,IAAM8C,EAAiB9C,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CiC,EAAYC,SAASC,uBAAuB,aAClD,IAAsB,IAAlBW,GAAwB,2BACxB,IAAML,EAASzC,EAAI,IAAM,EA/LjB,MA+LwCqB,EADxB,cAEWjC,EAAWY,GAFtB,GAEjB+C,EAFiB,KAEJC,EAFI,KAGxB,IAAqB,IAAjBD,EACA,iBAEJ,IAAMT,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAtMvB,EAuMRzC,GAXqB,GAIpB,cASH,6CAC6BZ,EAAWY,GADxC,GACMiD,EADN,KACgBL,EADhB,KAED,IAAkB,IAAdK,EACA,iBAEJ,IAAMC,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QAhNO,EAiNR5C,GARF,GAGG,Y,mCAYZ,IAFU,IAAD,EACuBgB,EAAwBW,KAAKF,MAAMtC,OAD1D,mBACFC,EADE,KAEAY,GAFA,KAEI,GAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CACxC,IAAM8C,EAAiB9C,EAAI,IAAM,GAAOA,EAAI,IAAM,EAC5CiC,EAAYC,SAASC,uBAAuB,aAClD,IAAsB,IAAlBW,GAAyB,WACzB,IAAML,EAASzC,EAAI,IAAM,EA9NjB,MA8NwCqB,EADxB,cAEWjC,EAAWY,GAFtB,GAEjB+C,EAFiB,KAEJC,EAFI,KAGlBV,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC3B,GAAJzC,GARsB,QAUxB,6CAC6BZ,EAAWY,GADxC,GACMiD,EADN,KACgBL,EADhB,KAED,IAAkB,IAAdK,EACA,iBAEJ,IAAMC,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QACG,GAAJ5C,GARF,GAGG,Y,sCAYZ,IAFa,IAAD,EC/Pb,SAAoCb,GACvC,IAAIC,EAAc,GACdiB,EAAiBlB,EAAMI,QAG3B,OAGJ,SAAuBc,EAAgBjB,GACnC,IAAK,IAAIY,EAAI,EAAGA,EAAIK,EAAehB,OAAQW,IAAK,CAC5C,IAAImD,EAAM9C,EAAeL,GACrBC,EAAID,EAAI,EAGZ,IAFAZ,EAAWc,KAAK,CAAC,eAAgBD,EAAGD,IACpCZ,EAAWc,KAAK,CAAC,eAAgBD,EAAGD,IAC9BC,GAAK,GAAKI,EAAeJ,GAAKkD,GAChC/D,EAAWc,KAAK,CAAC,YAAaD,EAAI,EAAGI,EAAeJ,KACpDI,EAAeJ,EAAI,GAAKI,EAAeJ,IACvCA,GAAQ,IACA,IACJb,EAAWc,KAAK,CAAC,eAAgBD,EAAGD,IACpCZ,EAAWc,KAAK,CAAC,eAAgBD,EAAGD,KAG5CZ,EAAWc,KAAK,CAAC,YAAaD,EAAI,EAAGkD,IACrC9C,EAAeJ,EAAI,GAAKkD,GArB5BC,CAAc/C,EAAgBjB,GAEvB,CAACA,EADRD,EAAQkB,GD4P4BgD,CAA2B1B,KAAKF,MAAMtC,OAD1D,mBACLC,EADK,KAEHY,GAFG,KAEC,GAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CACxC,IAAM8C,EAAsC,iBAArB1D,EAAWY,GAAG,IAAgD,iBAArBZ,EAAWY,GAAG,GACxEiC,EAAYC,SAASC,uBAAuB,cAC5B,IAAlBW,EAAyB,WACzB,IAAML,EAA8B,iBAArBrD,EAAWY,GAAG,GA1PrB,MA0PgEqB,EADhD,cAEiBjC,EAAWY,GAF5B,GAEX+C,GAFW,WAEEC,EAFF,KAGlBV,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC3B,GAAJzC,GARsB,GAUvB,WAAD,kBACmCZ,EAAWY,GAD9C,GACYiD,GADZ,WACsBL,EADtB,KAEKM,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QACG,GAAJ5C,GALD,M,sCAYV,IAFa,IAAD,EACoBkB,EAA2BS,KAAKF,MAAMtC,OAD1D,mBACLC,EADK,KAEHY,GAFG,KAEC,GAAGA,EAAIZ,EAAWC,OAAQW,IAAK,CACxC,IAAM8C,EAAsC,iBAArB1D,EAAWY,GAAG,IAAgD,iBAArBZ,EAAWY,GAAG,GACxEiC,EAAYC,SAASC,uBAAuB,cAC5B,IAAlBW,EAAyB,WACzB,IAAML,EAA8B,iBAArBrD,EAAWY,GAAG,GAnRrB,MAmRgEqB,EADhD,cAEiBjC,EAAWY,GAF5B,GAEX+C,GAFW,WAEEC,EAFF,KAGlBV,EAAcL,EAAUc,GAAaR,MACrCC,EAAcP,EAAUe,GAAaT,MAC3CG,YAAW,WACPJ,EAAYK,gBAAkBF,EAC9BD,EAAYG,gBAAkBF,IAC3B,GAAJzC,GARsB,GAUvB,WAAD,kBACmCZ,EAAWY,GAD9C,GACYiD,GADZ,WACsBL,EADtB,KAEKM,EAAWjB,EAAUgB,GAAUV,MACrCG,YAAW,WACPQ,EAASL,OAAT,UAAqBD,EAArB,QACG,GAAJ5C,GALD,M,+BAUJ,IAAD,OAEGb,EAAUwC,KAAKF,MAAftC,MAER,OACI,oCACI,kBAACmE,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACtB,kBAACC,EAAA,EAAD,CAAKC,UAAU,iBACX,kBAACD,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,eAAe9B,SAAWC,KAAKF,MAAMC,SAAWmC,QAAS,kBAAM,EAAKjC,eAA/G,sBAAyJ,KAE7J,kBAAC6B,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,kBAAkBK,QAAS,kBAAM,EAAKC,cAAjF,cAAkH,KAEtH,kBAACL,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,kBAAkBK,QAAS,kBAAM,EAAKvD,cAAjF,cAAkH,KAEtH,kBAACmD,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,kBAAkBK,QAAS,kBAAM,EAAK5C,eAAjF,eAAoH,KAExH,kBAACwC,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,kBAAkBK,QAAS,kBAAM,EAAKT,kBAAjF,kBAA0H,KAE9H,kBAACK,EAAA,EAAIE,KAAL,KACI,kBAACC,EAAA,EAAD,CAAQF,UAAU,iBAAiBF,QAAQ,kBAAkBK,QAAS,kBAAM,EAAKzC,kBAAjF,kBAA0H,OAItI,yBAAKsC,UAAU,mBACVvE,EAAM4E,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIP,UAAU,YACVP,IAAKc,EACL1B,MAAO,CAAEM,OAAO,GAAD,OAAKmB,EAAL,kB,GA9LIE,IAAMC,WAuMrD,SAAStC,EAAUuC,EAAKC,GACpB,OAAOxE,KAAKC,MAAMD,KAAKyE,UAAYD,EAAMD,EAAM,GAAKA,G,MEhVzCG,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCKcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAAS8C,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.a7bf30fd.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\ngetQuickSortAnimations([7,2,1,6]);\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivot = auxillaryArray[endIndex];\n    let pivotIndex = startIndex;\n    for (let i = startIndex; i <= endIndex - 1; i++) {\n        animations.push([i, endIndex]);\n        animations.push([i, endIndex]);\n        if (auxillaryArray[i] <= pivot) {\n            //Swap these two heights\n            animations.push([i, auxillaryArray[pivotIndex]]);\n            animations.push([pivotIndex, auxillaryArray[i]]);\n            swap(auxillaryArray, i , pivotIndex);\n            pivotIndex++;\n        }\n        else {\n            animations.push([-1, -1]);\n            animations.push([-1, -1]);\n        }\n        animations.push([-1, -1]);\n        animations.push([-1, -1]);\n    }\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    animations.push([-1, -1]);\n    //Swap these two heights\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n    return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}","export function getBubbleSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    bubbleSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n    for (let i = 0; i < auxillaryArray.length - 1; i++) {\n        for (let j = 0; j < auxillaryArray.length - i - 1; j++) {\n            animations.push([j, j + 1]);\n            animations.push([j, j + 1]);\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\n                animations.push([j, auxillaryArray[j + 1]]);\n                animations.push([j + 1, auxillaryArray[j]]);\n                swap(auxillaryArray, j, j + 1);\n            }\n            else {\n                animations.push([-1, -1]);\n                animations.push([-1, -1]);\n            }\n        }\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    for (let i = 0; i < auxillaryArray.length - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < auxillaryArray.length; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}","import React from 'react';\nimport './SortingVisualizer.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Navbar, Nav, Button } from 'react-bootstrap';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSort.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSort.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSort.js';\nimport { getInsertionSortAnimations } from '../sortingAlgorithms/insertionSort.js';\nimport { getSelectionSortAnimations } from '../sortingAlgorithms/selectionSort.js';\n\nlet PRIMARY_COLOR = 'SpringGreen';\nconst SECONDARY_COLOR = 'red';\nconst BARS = 300;\nconst ANIMATION_SPEED_MS = 1;\nconst CSS_COLOR_NAMES = [\n    \"AliceBlue\",\n    \"Aqua\",\n    \"Aquamarine\",\n    \"Azure\",\n    \"Beige\",\n    \"Bisque\",\n    \"Black\",\n    \"BlanchedAlmond\",\n    \"Blue\",\n    \"BlueViolet\",\n    \"Brown\",\n    \"BurlyWood\",\n    \"CadetBlue\",\n    \"Chartreuse\",\n    \"Chocolate\",\n    \"Coral\",\n    \"CornflowerBlue\",\n    \"Crimson\",\n    \"Cyan\",\n    \"DarkBlue\",\n    \"DarkCyan\",\n    \"DarkGoldenRod\",\n    \"DarkGray\",\n    \"DarkGrey\",\n    \"DarkGreen\",\n    \"DarkKhaki\",\n    \"DarkMagenta\",\n    \"DarkOliveGreen\",\n    \"DarkOrange\",\n    \"DarkOrchid\",\n    \"DarkRed\",\n    \"DarkSalmon\",\n    \"DarkSeaGreen\",\n    \"DarkSlateBlue\",\n    \"DarkSlateGray\",\n    \"DarkSlateGrey\",\n    \"DarkTurquoise\",\n    \"DarkViolet\",\n    \"DeepPink\",\n    \"DeepSkyBlue\",\n    \"DimGray\",\n    \"DimGrey\",\n    \"DodgerBlue\",\n    \"FireBrick\",\n    \"ForestGreen\",\n    \"Fuchsia\",\n    \"Gold\",\n    \"GoldenRod\",\n    \"Gray\",\n    \"Grey\",\n    \"Green\",\n    \"GreenYellow\",\n    \"HotPink\",\n    \"IndianRed\",\n    \"Indigo\",\n    \"Khaki\",\n    \"LawnGreen\",\n    \"LemonChiffon\",\n    \"LightBlue\",\n    \"LightCoral\",\n    \"LightGoldenRodYellow\",\n    \"LightGray\",\n    \"LightGrey\",\n    \"LightGreen\",\n    \"LightPink\",\n    \"LightSalmon\",\n    \"LightSeaGreen\",\n    \"LightSkyBlue\",\n    \"LightSlateGray\",\n    \"LightSlateGrey\",\n    \"LightSteelBlue\",\n    \"LightYellow\",\n    \"Lime\",\n    \"LimeGreen\",\n    \"Linen\",\n    \"Magenta\",\n    \"Maroon\",\n    \"MediumAquaMarine\",\n    \"MediumBlue\",\n    \"MediumOrchid\",\n    \"MediumPurple\",\n    \"MediumSeaGreen\",\n    \"MediumSlateBlue\",\n    \"MediumSpringGreen\",\n    \"MediumTurquoise\",\n    \"MediumVioletRed\",\n    \"MidnightBlue\",\n    \"MintCream\",\n    \"Moccasin\",\n    \"NavajoWhite\",\n    \"Navy\",\n    \"OldLace\",\n    \"Olive\",\n    \"OliveDrab\",\n    \"Orange\",\n    \"OrangeRed\",\n    \"Orchid\",\n    \"PaleGreen\",\n    \"PaleTurquoise\",\n    \"PaleVioletRed\",\n    \"PapayaWhip\",\n    \"PeachPuff\",\n    \"Peru\",\n    \"Pink\",\n    \"Plum\",\n    \"PowderBlue\",\n    \"Purple\",\n    \"RebeccaPurple\",\n    \"Red\",\n    \"RosyBrown\",\n    \"RoyalBlue\",\n    \"SaddleBrown\",\n    \"Salmon\",\n    \"SandyBrown\",\n    \"SeaGreen\",\n    \"Sienna\",\n    \"Silver\",\n    \"SkyBlue\",\n    \"SlateBlue\",\n    \"SlateGray\",\n    \"SlateGrey\",\n    \"SpringGreen\",\n    \"SteelBlue\",\n    \"Tan\",\n    \"Teal\",\n    \"Thistle\",\n    \"Tomato\",\n    \"Turquoise\",\n    \"Violet\",\n    \"Yellow\",\n    \"YellowGreen\",\n  ];\n\nexport default class SortingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            disabled: false,\n        };\n    }\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        for (let i = 0; i < BARS; i++) {\n            array.push(randomInt(5, 600));\n        }\n        this.setState({ array });\n        PRIMARY_COLOR = CSS_COLOR_NAMES[randomInt(0, CSS_COLOR_NAMES.length)];\n        console.log(PRIMARY_COLOR);\n    }\n\n    mergeSort() {\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n                setTimeout(() => {\n                    const [barOneIdx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    barOneStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort() {\n        const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length - 1; i++) {\n            const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                if (barOneIndex === -1) {\n                    continue;\n                }\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort() {\n        const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (i % 4 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * 0.1);\n            }\n            else {\n                const [barIndex, newHeight] = animations[i];\n                if (barIndex === -1) {\n                    continue;\n                }\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * 0.1);\n            }\n        }\n    }\n\n    insertionSort() {\n        const [animations, sortArray] = getInsertionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * 0.4);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * 0.4);\n            }\n        }\n    }\n\n    selectionSort() {\n        const [animations, sortArray] = getSelectionSortAnimations(this.state.array);\n        for (let i = 0; i < animations.length; i++) {\n            const isColorChange = (animations[i][0] === \"comparision1\") || (animations[i][0] === \"comparision2\");\n            const arrayBars = document.getElementsByClassName('array-bar');\n            if (isColorChange === true) {\n                const color = (animations[i][0] === \"comparision1\") ? SECONDARY_COLOR : PRIMARY_COLOR;\n                const [temp, barOneIndex, barTwoIndex] = animations[i];\n                const barOneStyle = arrayBars[barOneIndex].style;\n                const barTwoStyle = arrayBars[barTwoIndex].style;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * 0.2);\n            }\n            else {\n                const [temp, barIndex, newHeight] = animations[i];\n                const barStyle = arrayBars[barIndex].style;\n                setTimeout(() => {\n                    barStyle.height = `${newHeight}px`;\n                }, i * 0.2);\n            }\n        }\n    }\n\n    render() {\n\n        const { array } = this.state;\n\n        return (\n            <>\n                <Navbar bg=\"dark\" variant=\"dark\">\n                    <Nav className=\"center-navbar\">\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-info\" disabled={ this.state.disabled } onClick={() => this.resetArray()}>Generate New Array</Button>{' '}\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-primary\" onClick={() => this.mergeSort()}>Merge Sort</Button>{' '}\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-primary\" onClick={() => this.quickSort()}>Quick Sort</Button>{' '}\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-primary\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>{' '}\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-primary\" onClick={() => this.insertionSort()}>Insertion Sort</Button>{' '}\n                        </Nav.Item>\n                        <Nav.Item>\n                            <Button className=\"button-spacing\" variant=\"outline-primary\" onClick={() => this.selectionSort()}>Selection Sort</Button>{' '}\n                        </Nav.Item>\n                    </Nav>\n                </Navbar>\n                <div className=\"array-container\">\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{ height: `${value}px` }}></div>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\n\n\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    for (let i = 1; i < auxillaryArray.length; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}